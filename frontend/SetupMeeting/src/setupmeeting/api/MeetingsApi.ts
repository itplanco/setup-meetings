/**
 * e-幹事 API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class MeetingsApi {

    // protected basePath = 'https://localhost';
    protected basePath = 'http://ekanji.azurewebsites.net/';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * 
     * @param meetingId 
     * @param newAttendee 
     */
    public addAttendee(meetingId: string, newAttendee?: models.CreateNewAttendeeRequest, extraHttpRequestParams?: any): Observable<{}> {
        return this.addAttendeeWithHttpInfo(meetingId, newAttendee, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @param meetingId 
     * @param newInvitee 
     */
    public addInvitee(meetingId: string, newInvitee?: models.CreateNewInviteeRequest, extraHttpRequestParams?: any): Observable<{}> {
        return this.addInviteeWithHttpInfo(meetingId, newInvitee, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @param meetingId 
     * @param newInvitee 
     */
    public addSponsor(meetingId: string, newInvitee?: models.CreateNewSponsorRequest, extraHttpRequestParams?: any): Observable<{}> {
        return this.addSponsorWithHttpInfo(meetingId, newInvitee, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @param meetingId 
     * @param userId 
     */
    public attendeeAttend(meetingId: string, userId: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.attendeeAttendWithHttpInfo(meetingId, userId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @param meetingId 
     * @param userId 
     */
    public attendeePaid(meetingId: string, userId: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.attendeePaidWithHttpInfo(meetingId, userId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @param newMeeting 
     */
    public createNewMeeting(newMeeting?: models.CreateNewMeetingRequest, extraHttpRequestParams?: any): Observable<{}> {
        return this.createNewMeetingWithHttpInfo(newMeeting, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @param meetingId 
     * @param userId 
     */
    public deleteAttendee(meetingId: string, userId: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.deleteAttendeeWithHttpInfo(meetingId, userId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @param meetingId 
     * @param userId 
     */
    public deleteInvitee(meetingId: string, userId: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.deleteInviteeWithHttpInfo(meetingId, userId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @param meetingId 
     * @param userId 
     */
    public deleteSponsor(meetingId: string, userId: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.deleteSponsorWithHttpInfo(meetingId, userId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @param meetingId 
     */
    public getAttendees(meetingId: string, extraHttpRequestParams?: any): Observable<models.AttendeesResponse> {
        return this.getAttendeesWithHttpInfo(meetingId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @param meetingId 
     * @param userId 
     */
    public getAttendeesById(meetingId: string, userId: string, extraHttpRequestParams?: any): Observable<models.AttendeeResponse> {
        return this.getAttendeesByIdWithHttpInfo(meetingId, userId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @param meetingId 
     */
    public getInvitees(meetingId: string, extraHttpRequestParams?: any): Observable<models.InviteesResponse> {
        return this.getInviteesWithHttpInfo(meetingId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @param meetingId 
     * @param userId 
     */
    public getInviteesById(meetingId: string, userId: string, extraHttpRequestParams?: any): Observable<models.InviteeResponse> {
        return this.getInviteesByIdWithHttpInfo(meetingId, userId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @param meetingId 
     */
    public getMeetingById(meetingId: string, extraHttpRequestParams?: any): Observable<models.MeetingResponse> {
        return this.getMeetingByIdWithHttpInfo(meetingId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @param meetingId 
     */
    public getPayment(meetingId: string, extraHttpRequestParams?: any): Observable<models.MeetingPaymentResponse> {
        return this.getPaymentWithHttpInfo(meetingId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @param meetingId 
     * @param userId 
     */
    public getSponsorById(meetingId: string, userId: string, extraHttpRequestParams?: any): Observable<models.SponsorResponse> {
        return this.getSponsorByIdWithHttpInfo(meetingId, userId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @param meetingId 
     */
    public getSponsors(meetingId: string, extraHttpRequestParams?: any): Observable<models.SponsorsResponse> {
        return this.getSponsorsWithHttpInfo(meetingId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @param meetingId 
     * @param userId 
     * @param response 
     */
    public updateInviteeRsvp(meetingId: string, userId: string, response?: models.InviteeRespondToRsvpRequest, extraHttpRequestParams?: any): Observable<{}> {
        return this.updateInviteeRsvpWithHttpInfo(meetingId, userId, response, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @param meetingId 
     * @param payment 
     */
    public updatePaymentInfo(meetingId: string, payment?: models.UpdatePaymentInfoRequest, extraHttpRequestParams?: any): Observable<{}> {
        return this.updatePaymentInfoWithHttpInfo(meetingId, payment, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }


    /**
     * 
     * 
     * @param meetingId 
     * @param newAttendee 
     */
    public addAttendeeWithHttpInfo(meetingId: string, newAttendee?: models.CreateNewAttendeeRequest, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/meetings/${meetingId}/attendees'
                    .replace('${' + 'meetingId' + '}', String(meetingId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'meetingId' is not null or undefined
        if (meetingId === null || meetingId === undefined) {
            throw new Error('Required parameter meetingId was null or undefined when calling addAttendee.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: newAttendee == null ? '' : JSON.stringify(newAttendee), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param meetingId 
     * @param newInvitee 
     */
    public addInviteeWithHttpInfo(meetingId: string, newInvitee?: models.CreateNewInviteeRequest, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/meetings/${meetingId}/invitees'
                    .replace('${' + 'meetingId' + '}', String(meetingId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'meetingId' is not null or undefined
        if (meetingId === null || meetingId === undefined) {
            throw new Error('Required parameter meetingId was null or undefined when calling addInvitee.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: newInvitee == null ? '' : JSON.stringify(newInvitee), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param meetingId 
     * @param newInvitee 
     */
    public addSponsorWithHttpInfo(meetingId: string, newInvitee?: models.CreateNewSponsorRequest, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/meetings/${meetingId}/sponsors'
                    .replace('${' + 'meetingId' + '}', String(meetingId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'meetingId' is not null or undefined
        if (meetingId === null || meetingId === undefined) {
            throw new Error('Required parameter meetingId was null or undefined when calling addSponsor.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: newInvitee == null ? '' : JSON.stringify(newInvitee), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param meetingId 
     * @param userId 
     */
    public attendeeAttendWithHttpInfo(meetingId: string, userId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/meetings/${meetingId}/attendees/${userId}/attend'
                    .replace('${' + 'meetingId' + '}', String(meetingId))
                    .replace('${' + 'userId' + '}', String(userId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'meetingId' is not null or undefined
        if (meetingId === null || meetingId === undefined) {
            throw new Error('Required parameter meetingId was null or undefined when calling attendeeAttend.');
        }
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling attendeeAttend.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param meetingId 
     * @param userId 
     */
    public attendeePaidWithHttpInfo(meetingId: string, userId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/meetings/${meetingId}/attendees/${userId}/paid'
                    .replace('${' + 'meetingId' + '}', String(meetingId))
                    .replace('${' + 'userId' + '}', String(userId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'meetingId' is not null or undefined
        if (meetingId === null || meetingId === undefined) {
            throw new Error('Required parameter meetingId was null or undefined when calling attendeePaid.');
        }
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling attendeePaid.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param newMeeting 
     */
    public createNewMeetingWithHttpInfo(newMeeting?: models.CreateNewMeetingRequest, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/meetings';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: newMeeting == null ? '' : JSON.stringify(newMeeting), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param meetingId 
     * @param userId 
     */
    public deleteAttendeeWithHttpInfo(meetingId: string, userId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/meetings/${meetingId}/attendees/${userId}'
                    .replace('${' + 'meetingId' + '}', String(meetingId))
                    .replace('${' + 'userId' + '}', String(userId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'meetingId' is not null or undefined
        if (meetingId === null || meetingId === undefined) {
            throw new Error('Required parameter meetingId was null or undefined when calling deleteAttendee.');
        }
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling deleteAttendee.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param meetingId 
     * @param userId 
     */
    public deleteInviteeWithHttpInfo(meetingId: string, userId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/meetings/${meetingId}/invitees/${userId}'
                    .replace('${' + 'meetingId' + '}', String(meetingId))
                    .replace('${' + 'userId' + '}', String(userId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'meetingId' is not null or undefined
        if (meetingId === null || meetingId === undefined) {
            throw new Error('Required parameter meetingId was null or undefined when calling deleteInvitee.');
        }
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling deleteInvitee.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param meetingId 
     * @param userId 
     */
    public deleteSponsorWithHttpInfo(meetingId: string, userId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/meetings/${meetingId}/sponsors/${userId}'
                    .replace('${' + 'meetingId' + '}', String(meetingId))
                    .replace('${' + 'userId' + '}', String(userId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'meetingId' is not null or undefined
        if (meetingId === null || meetingId === undefined) {
            throw new Error('Required parameter meetingId was null or undefined when calling deleteSponsor.');
        }
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling deleteSponsor.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param meetingId 
     */
    public getAttendeesWithHttpInfo(meetingId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/meetings/${meetingId}/attendees'
                    .replace('${' + 'meetingId' + '}', String(meetingId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'meetingId' is not null or undefined
        if (meetingId === null || meetingId === undefined) {
            throw new Error('Required parameter meetingId was null or undefined when calling getAttendees.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param meetingId 
     * @param userId 
     */
    public getAttendeesByIdWithHttpInfo(meetingId: string, userId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/meetings/${meetingId}/attendees/${userId}'
                    .replace('${' + 'meetingId' + '}', String(meetingId))
                    .replace('${' + 'userId' + '}', String(userId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'meetingId' is not null or undefined
        if (meetingId === null || meetingId === undefined) {
            throw new Error('Required parameter meetingId was null or undefined when calling getAttendeesById.');
        }
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getAttendeesById.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param meetingId 
     */
    public getInviteesWithHttpInfo(meetingId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/meetings/${meetingId}/invitees'
                    .replace('${' + 'meetingId' + '}', String(meetingId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'meetingId' is not null or undefined
        if (meetingId === null || meetingId === undefined) {
            throw new Error('Required parameter meetingId was null or undefined when calling getInvitees.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param meetingId 
     * @param userId 
     */
    public getInviteesByIdWithHttpInfo(meetingId: string, userId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/meetings/${meetingId}/invitees/${userId}'
                    .replace('${' + 'meetingId' + '}', String(meetingId))
                    .replace('${' + 'userId' + '}', String(userId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'meetingId' is not null or undefined
        if (meetingId === null || meetingId === undefined) {
            throw new Error('Required parameter meetingId was null or undefined when calling getInviteesById.');
        }
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getInviteesById.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param meetingId 
     */
    public getMeetingByIdWithHttpInfo(meetingId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/meetings/${meetingId}'
                    .replace('${' + 'meetingId' + '}', String(meetingId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'meetingId' is not null or undefined
        if (meetingId === null || meetingId === undefined) {
            throw new Error('Required parameter meetingId was null or undefined when calling getMeetingById.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param meetingId 
     */
    public getPaymentWithHttpInfo(meetingId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/meetings/${meetingId}/payment'
                    .replace('${' + 'meetingId' + '}', String(meetingId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'meetingId' is not null or undefined
        if (meetingId === null || meetingId === undefined) {
            throw new Error('Required parameter meetingId was null or undefined when calling getPayment.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param meetingId 
     * @param userId 
     */
    public getSponsorByIdWithHttpInfo(meetingId: string, userId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/meetings/${meetingId}/sponsors/${userId}'
                    .replace('${' + 'meetingId' + '}', String(meetingId))
                    .replace('${' + 'userId' + '}', String(userId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'meetingId' is not null or undefined
        if (meetingId === null || meetingId === undefined) {
            throw new Error('Required parameter meetingId was null or undefined when calling getSponsorById.');
        }
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getSponsorById.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param meetingId 
     */
    public getSponsorsWithHttpInfo(meetingId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/meetings/${meetingId}/sponsors'
                    .replace('${' + 'meetingId' + '}', String(meetingId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'meetingId' is not null or undefined
        if (meetingId === null || meetingId === undefined) {
            throw new Error('Required parameter meetingId was null or undefined when calling getSponsors.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param meetingId 
     * @param userId 
     * @param response 
     */
    public updateInviteeRsvpWithHttpInfo(meetingId: string, userId: string, response?: models.InviteeRespondToRsvpRequest, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/meetings/${meetingId}/invitees/${userId}/rsvp'
                    .replace('${' + 'meetingId' + '}', String(meetingId))
                    .replace('${' + 'userId' + '}', String(userId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'meetingId' is not null or undefined
        if (meetingId === null || meetingId === undefined) {
            throw new Error('Required parameter meetingId was null or undefined when calling updateInviteeRsvp.');
        }
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling updateInviteeRsvp.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: response == null ? '' : JSON.stringify(response), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param meetingId 
     * @param payment 
     */
    public updatePaymentInfoWithHttpInfo(meetingId: string, payment?: models.UpdatePaymentInfoRequest, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/api/meetings/${meetingId}/payment'
                    .replace('${' + 'meetingId' + '}', String(meetingId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'meetingId' is not null or undefined
        if (meetingId === null || meetingId === undefined) {
            throw new Error('Required parameter meetingId was null or undefined when calling updatePaymentInfo.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: payment == null ? '' : JSON.stringify(payment), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
